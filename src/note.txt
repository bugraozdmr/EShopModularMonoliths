Migration almak:

dotnet ef migrations add InitialCreate --output-dir Data/Migrations --project Modules/Catalog --startup-project Bootstrapper/Api

Update Database:
dotnet ef database update --startup-project Bootstrapper/Api


** src altında olmalısın
Basket için diğer db contex migration almak : (context belirtmek zorundasın yoksa birden çok context var hatası verir)
dotnet ef migrations add InitialCreate --output-dir Data/Migrations --project Modules/Basket --startup-project Bootstrapper/Api --context BasketDbContext

update işleminde de aynı şekilde context verilmeli
dotnet ef database update --startup-project Bootstrapper/Api --context BasketDbContext


Contractlara ayrılma sebebi başka modülleride kullanmak ve bu önemli düşük bağlanma için

CREATE SCHEMA identity;
GRANT ALL ON SCHEMA identity to postgres;

myuser olusturduktan sonra
http://localhost:9090/realms/myrealm/account/

sonrasında client eklencek --- https://www.udemy.com/course/net-backend-bootcamp-modulith-vsa-ddd-cqrs-and-outbox/learn/lecture/45192445#notes

Order için migration
dotnet ef migrations add InitialCreate --output-dir Data/Migrations --project Modules/Ordering --startup-project Bootstrapper/Api --context OrderingDbContext

update db
dotnet ef database update --startup-project Bootstrapper/Api --context OrderingDbContext


Domain event handle:
CheckoutBasketEndpoint => CheckoutBasketHandle => OutboxProcessor => BasketCheckoutIntegrationEventHandler => CreateOrderHandler => Orders => OrderCreatedEvent

publish sonrası yakalanır IntegrationEventHandler'a

en sonda domain event ile işlem bitiyor